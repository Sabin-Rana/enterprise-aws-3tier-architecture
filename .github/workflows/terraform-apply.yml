# ==============================================================================
# TERRAFORM APPLY WORKFLOW - ENTERPRISE AWS 3-TIER ARCHITECTURE
# ==============================================================================
# This workflow deploys infrastructure changes to AWS with manual approval
# Includes safety controls for production deployments and destruction procedures
# ==============================================================================

name: Terraform Apply

# on:
#   push:
#     paths:
#       - 'terraform/**'
#       - '.github/workflows/terraform-apply.yml'
#     branches: [ main ]
workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  # Infrastructure planning and approval
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    # Checkout repository code
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Configure AWS credentials for deployment
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # Setup Terraform environment
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    # Initialize Terraform backend
    - name: Terraform Init
      run: |
        cd terraform/environments/production
        terraform init -input=false
        echo "Terraform initialized successfully"
        
    # Create execution plan for review
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform/environments/production
        terraform plan -input=false -out=tfplan
        echo "Terraform plan created"
        
    # Upload plan artifact for approval
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: terraform/environments/production/tfplan
        retention-days: 1

  # Infrastructure deployment with manual approval
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    
    steps:
    # Download approved plan artifact
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        
    # Configure AWS credentials for deployment
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # Setup Terraform environment
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    # Initialize Terraform backend
    - name: Terraform Init
      run: |
        cd terraform/environments/production
        terraform init -input=false
        
    # Apply approved infrastructure changes
    - name: Terraform Apply
      run: |
        cd terraform/environments/production
        terraform apply -input=false -auto-approve tfplan
        echo "Infrastructure deployment completed!"
        
    # Display deployment outputs
    - name: Get Terraform Outputs
      run: |
        cd terraform/environments/production
        terraform output

  # Infrastructure destruction for cleanup
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch'
    
    steps:
    # Checkout repository code
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Configure AWS credentials for destruction
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # Setup Terraform environment
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    # Initialize Terraform backend
    - name: Terraform Init
      run: |
        cd terraform/environments/production
        terraform init -input=false
        
    # Destroy infrastructure resources
    - name: Terraform Destroy
      run: |
        cd terraform/environments/production
        echo "DESTROYING ALL INFRASTRUCTURE - THIS CANNOT BE UNDONE"
        terraform destroy -input=false -auto-approve
        echo "Infrastructure destroyed successfully"