name: Frontend Deployment
# This workflow builds and deploys the React frontend to AWS S3 + CloudFront
# Runs when frontend code changes or on manual trigger

on:
  push:
    paths:
      - 'frontend/**'                    # Trigger when frontend files change
      - '.github/workflows/frontend-deploy.yml'
    branches: [ main ]
  pull_request:
    paths:
      - 'frontend/**'
  workflow_dispatch:                     # Allow manual deployment from GitHub UI

# Environment variables available to all jobs
env:
  NODE_VERSION: '18'                    # Node.js version for consistency
  AWS_REGION: 'us-east-1'               # AWS region for deployment

jobs:
  # Job 1: Build and test the frontend application
  build-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Step 2: Setup Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'                    # Cache node_modules for faster builds
        cache-dependency-path: frontend/package-lock.json
        
    # Step 3: Install frontend dependencies
    - name: Install dependencies
      run: |
        cd frontend
        npm ci                          # Clean install for consistency
      # ci uses package-lock.json for reproducible builds
      
    # Step 4: Run frontend tests (if we had test suite)
    - name: Run tests
      run: |
        cd frontend
        npm test -- --watchAll=false    # Run tests once
      # This would fail the build if tests don't pass
      
    # Step 5: Build production bundle
    - name: Build production bundle
      run: |
        cd frontend
        npm run build                   # Creates build/ folder
        echo "Frontend build completed"
        
    # Step 6: Upload build artifacts for deployment job
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/           # The built React app
        retention-days: 1               # Keep for 1 day to save storage

  # Job 2: Deploy to AWS S3 (depends on successful build)
  deploy-to-s3:
    name: Deploy to S3
    runs-on: ubuntu-latest
    needs: build-frontend               # Wait for build job to complete
    environment: production             # Links to GitHub environment for secrets
    
    # Only deploy on main branch, not on PRs
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    # Step 1: Download the built frontend
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend-build           # Downloaded to this directory
        
    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # Step 3: Deploy to S3 bucket (we'll create this bucket name)
    - name: Deploy to S3
      run: |
        aws s3 sync frontend-build/ s3://enterprise-aws-3tier-frontend-${{ github.sha }} \
          --delete \                    # Remove files not in current build
          --acl public-read \          # Allow public read access
          --cache-control "max-age=31536000"  # Cache for 1 year
        echo "Frontend deployed to S3"
        
    # Step 4: Invalidate CloudFront cache (for production)
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"                 # Invalidate all files
      # This ensures users get the latest version immediately

  # Job 3: Security scan (runs in parallel with build)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level high   # Check for high severity vulnerabilities
      # This helps catch security issues in dependencies